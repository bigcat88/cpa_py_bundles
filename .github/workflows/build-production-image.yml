name: Build Production Image

on:
  workflow_dispatch:

concurrency:
  group: build-production-image
  cancel-in-progress: true

jobs:
  manylinux64:
    name: ManyLinux â€¢ ${{ matrix.build_arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        build_arch: [ "arm64", "amd64", "arm/v7" ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: ARM64 prepare
        if: matrix.build_arch == 'arm64'
        run: |
          echo BASE_DOCKER_FILE="docker/manylinux64.Dockerfile" >> $GITHUB_ENV
          echo BASE_IMG_NAME="base-manylinux-arm64" >> $GITHUB_ENV
          echo CONTAINER_NAME="manylinux-arm64" >> $GITHUB_ENV
          echo PROD_IMG_NAME="prod-manylinux-arm64" >> $GITHUB_ENV

      - name: AMD64 prepare
        if: matrix.build_arch == 'amd64'
        run: |
          echo BASE_DOCKER_FILE="docker/manylinux64.Dockerfile" >> $GITHUB_ENV
          echo BASE_IMG_NAME="base-manylinux-amd64" >> $GITHUB_ENV
          echo CONTAINER_NAME="manylinux-amd64" >> $GITHUB_ENV
          echo PROD_IMG_NAME="prod-manylinux-amd64" >> $GITHUB_ENV

      - name: ARM7 prepare
        if: matrix.build_arch == 'arm/v7'
        run: |
          echo BASE_DOCKER_FILE="docker/manylinux.Dockerfile" >> $GITHUB_ENV
          echo BASE_IMG_NAME="base-manylinux-arm7" >> $GITHUB_ENV
          echo CONTAINER_NAME="manylinux-arm7" >> $GITHUB_ENV
          echo PROD_IMG_NAME="prod-manylinux-arm7" >> $GITHUB_ENV

      - name: Load Base Image Cache
        uses: actions/cache@v3
        id: base-manylinux
        with:
          path: /tmp/.cache-base
          key: ${{ matrix.build_arch }}-base-${{ hashFiles( env.BASE_DOCKER_FILE ) }}

      - name: Cache Production Image
        uses: actions/cache@v3
        id: production-manylinux
        with:
          path: /tmp/.cache-production
          key: ${{ matrix.build_arch }}-prod-${{ hashFiles(env.BASE_DOCKER_FILE, 'requirements.txt') }}

      - name: Load Base Image
        if: steps.production-manylinux.outputs.cache-hit != 'true'
        run: |
          docker load --input /tmp/.cache-base/${{ env.BASE_IMG_NAME }}.tar
          mkdir /tmp/.cache-production

      - name: Build Production Image
        run: |
          docker run \
              --platform linux/${{ matrix.build_arch }} \
              --name ${{ env.CONTAINER_NAME }} \
              -v $(realpath .):/build \
              --workdir /build \
              base-manylinux-${{ matrix.build_arch }}:latest \
              python3 -m pip install -r ./requirements.txt
          docker commit \
              ${{ env.CONTAINER_NAME }} manylinux-${{ matrix.build_arch }}:latest
          docker image save \
              manylinux-${{ matrix.build_arch }}:latest | gzip > \
              /tmp/.cache-production/${{ env.PROD_IMG_NAME }}.tar.gz

      - name: Debug Step
        run: |
          ls -la /tmp/.cache-base/
          ls -la /tmp/.cache-production/
