name: Publish Release

on:
  workflow_dispatch:

concurrency:
  group: publish-release
  cancel-in-progress: true

jobs:
  manylinux:
    name: ManyLinux • ${{ matrix.build_arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_arch: [ "arm64", "amd64" ]

    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: ARM64 prepare
        if: matrix.build_arch == 'arm64'
        run: |
          echo BASE_DOCKER_FILE="docker/build/manylinux64.Dockerfile" >> $GITHUB_ENV
          echo BUILD_PLATFORM="linux/arm64" >> $GITHUB_ENV
          echo BUILD_IMG="quay.io/pypa/manylinux2014_aarch64" >> $GITHUB_ENV
          echo BIN_NAME="cpa_manylinux_arm64" >> $GITHUB_ENV
          echo TEST_DISTRO_NAME="debian:10" >> $GITHUB_ENV

      - name: AMD64 prepare
        if: matrix.build_arch == 'amd64'
        run: |
          echo BASE_DOCKER_FILE="docker/build/manylinux64.Dockerfile" >> $GITHUB_ENV
          echo BUILD_PLATFORM="linux/amd64" >> $GITHUB_ENV
          echo BUILD_IMG="quay.io/pypa/manylinux2014_x86_64" >> $GITHUB_ENV
          echo BIN_NAME="cpa_manylinux_amd64" >> $GITHUB_ENV
          echo TEST_DISTRO_NAME="debian:10" >> $GITHUB_ENV

      - name: ARM7 prepare
        if: matrix.build_arch == 'armv7'
        run: |
          echo BASE_DOCKER_FILE="docker/build/manylinux.Dockerfile" >> $GITHUB_ENV
          echo BUILD_PLATFORM="linux/arm/v7" >> $GITHUB_ENV
          echo BUILD_IMG="debian:11" >> $GITHUB_ENV
          echo BIN_NAME="cpa_manylinux_armv7" >> $GITHUB_ENV
          echo TEST_DISTRO_NAME="debian:11" >> $GITHUB_ENV

      - name: Build Release Binaries
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ env.BASE_DOCKER_FILE }}
          build-args: BUILD_IMG=${{ env.BUILD_IMG }}
          platforms: ${{ env.BUILD_PLATFORM }}
          push: false
          cache-from: type=gha,mode=max,scope=build-manylinux-${{ matrix.build_arch }}
          outputs: type=docker,dest=/tmp/binaries-manylinux-${{ matrix.build_arch }}.tar
          tags: binaries-manylinux-${{ matrix.build_arch }}:latest
          target: binaries

      - name: Get Release Binaries
        run: |
          docker load < /tmp/binaries-manylinux-${{ matrix.build_arch }}.tar
          id=$(docker create binaries-manylinux-${{ matrix.build_arch }}:latest)
          docker cp $id:/build/main.bin ${{ env.BIN_NAME }}
          gzip -9 -c ${{ env.BIN_NAME }} > ${{ env.BIN_NAME }}.gz

      - name: Uploading binary
        uses: actions/upload-artifact@v3
        with:
          name: cpa_binaries
          path: ./${{ env.BIN_NAME }}.gz
          if-no-files-found: error

      - name: Test binary
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: ${{ env.BUILD_PLATFORM }}
          push: false
          file: docker/test_release.Dockerfile
          build-args: |
            CPA_NAME=${{ env.BIN_NAME }}
            DISTRO_NAME=${{ env.TEST_DISTRO_NAME }}

#  musllinux:
#    name: MuslLinux • ${{ matrix.build_arch }}
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        build_arch: [ "arm64", "amd64" ]
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#
#      - name: Setup Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: ARM64 prepare
#        if: matrix.build_arch == 'arm64'
#        run: |
#          echo BASE_DOCKER_FILE="docker/musllinux.Dockerfile" >> $GITHUB_ENV
#          echo BUILD_PLATFORM="linux/arm64" >> $GITHUB_ENV
#          echo BIN_NAME="cpa_musllinux_arm64" >> $GITHUB_ENV
#          echo TEST_DISTRO_NAME="alpine:3.15" >> $GITHUB_ENV
#
#      - name: AMD64 prepare
#        if: matrix.build_arch == 'amd64'
#        run: |
#          echo BASE_DOCKER_FILE="docker/musllinux.Dockerfile" >> $GITHUB_ENV
#          echo BUILD_PLATFORM="linux/amd64" >> $GITHUB_ENV
#          echo BIN_NAME="cpa_musllinux_amd64" >> $GITHUB_ENV
#          echo TEST_DISTRO_NAME="alpine:3.15" >> $GITHUB_ENV
#
#      - name: ARM7 prepare
#        if: matrix.build_arch == 'armv7'
#        run: |
#          echo BASE_DOCKER_FILE="docker/musllinux.Dockerfile" >> $GITHUB_ENV
#          echo BUILD_PLATFORM="linux/arm/v7" >> $GITHUB_ENV
#          echo BIN_NAME="cpa_musllinux_armv7" >> $GITHUB_ENV
#          echo TEST_DISTRO_NAME="alpine:3.15" >> $GITHUB_ENV
#
#      - name: Load Production Image Cache
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.cache-production
#          key: ${{ matrix.build_arch }}-prod-${{ hashFiles(env.BASE_DOCKER_FILE, 'requirements.txt') }}
#
#      - name: Load Image
#        run: docker load < /tmp/.cache-production/prod-musllinux-${{ matrix.build_arch }}.tar.gz
#
#      - name: Run Image
#        run: |
#          docker run \
#              --platform ${{ env.BUILD_PLATFORM }} \
#              -v $(realpath .):/build \
#              --workdir /build \
#              prod-musllinux-${{ matrix.build_arch }}:latest \
#              python3 -m nuitka --plugin-enable=numpy --standalone --onefile ./python/main.py
#          mv main.bin ${{ env.BIN_NAME }}
#          gzip -9 -c ${{ env.BIN_NAME }} > ${{ env.BIN_NAME }}.gz
#
#      - name: Uploading binary
#        uses: actions/upload-artifact@v3
#        with:
#          name: cpa_binaries
#          path: ./${{ env.BIN_NAME }}.gz
#          if-no-files-found: error
#
#      - name: Test binary
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          platforms: ${{ env.BUILD_PLATFORM }}
#          push: false
#          file: docker/test_release.Dockerfile
#          build-args: |
#            CPA_NAME=${{ env.BIN_NAME }}
#            DISTRO_NAME=${{ env.TEST_DISTRO_NAME }}
